########################## General Imports #####################################
import os
import re
import sys
import time
import subprocess
import mmap
import contextlib
from xml.etree import  ElementTree
import xml.etree.ElementTree as ET                                              # importing Xml parsing module to extract the text from the xml

########################## Local Imports #######################################
import lib_constants
import lib_epcs
import json
import re
import utils
import library
import lib_tool_installation
################################################################################
#   Function name   : verify_acpi_table()
#   description     : Read and Verify ACPI table TPM2 OEM ID;
#                     FACP bit[21:21]; ACPI Dump PTPY
#   parameters      : 'tc_id' is test case id
#                          'script_id' is script id
#                          'token ' is original string
#   Returns         : True/False
######################### Main script ##########################################
def verify_acpi_table(table_name, tc_id,script_id,log_level = "ALL",tbd = None):

    logfile =script_id.split(".")[0]
    log_path =lib_constants.SCRIPTDIR
    output = []

    try:
        systemscopepath = utils.ReadConfig("Systemscope","Tooldir")             # reading the config file to fetch the details of tool directory
        if lib_tool_installation.install_Syscope(tc_id,script_id,log_level,tbd):
            library.write_log(lib_constants.LOG_INFO,"INFO :SystemScope "
             "is Installed",tc_id,script_id,"system scope","None",log_level,tbd)# installs the syscope tool
        else:
            library.write_log(lib_constants.LOG_INFO,
            "INFO : SystemScope is NOT installed, Installing Now",tc_id,
                              script_id,"system scope","None",log_level,tbd)
    except Exception as e:
        library.write_log(lib_constants.LOG_ERROR,"FAIL: "+str(e),
                          tc_id,script_id,"system scope","None",log_level,tbd)
        return False
    try:
        if lib_tool_installation.execute_syscope_New(tc_id,script_id,log_level,
													 tbd):						# executes the syscope tool command line and saves the log in the tool folder
            library.write_log(lib_constants.LOG_INFO,
            "INFO: Log has been generated By System Scope tool",tc_id,
                              script_id,"system scope","None",log_level,tbd)
        else:
            library.write_log(lib_constants.LOG_INFO,
            "INFO: Log has not been generated By System Scope tool",
                         tc_id,script_id,"system scope","None",log_level,tbd)
            return False

    except Exception as e:
        library.write_log(lib_constants.LOG_ERROR,"ERROR: "+str(e),
                          tc_id,script_id,"system scope","None",log_level,tbd)
        return False
    try:
        with open('syscope.xml','rt')as xmlfile:                                #open the system scope xml file
            tree = ElementTree.parse(xmlfile)                                   #get tree element
            sys_scope_root = tree.getroot()                                     #get root element
        for node in tree.iter('Module'):                                        #loop through the Module tags
            name = node.attrib.get('Name')                                      #get all the name mode values
            output.append(str(name))                                            #appending to output list
        if 'ACPI'in output:
            child_root = sys_scope_root.findall(".//*[@Name='ACPI']/Group")     #gind all the group tags values
            acpi_subtable_list=[]
            for item in child_root:
                all_table_in_acpi = item.attrib                                 #get all the attribute of the tables
                for key,value in list(all_table_in_acpi.items()):                     #goop though each table attribute and store the value in list
                    acpi_subtable_list.append(str(value))
        else:
            library.write_log(lib_constants.LOG_INFO,"INFO: ACPI table does not"
                "exist in generated log file xml file",tc_id,script_id,
                              "system scope","None",log_level,tbd)
            return False
    except Exception as e:
        library.write_log(lib_constants.LOG_ERROR,"ERROR: " +str(e),
                          tc_id,script_id,"system scope","None",log_level,tbd)
        return False
    acpi_search_element = table_name.strip().upper()
    if acpi_search_element in acpi_subtable_list:                               #checking for child table name in ACPI branch
        try:
            os.chdir(systemscopepath)
            acpi_table_path = log_path+r"\\"+logfile+"_acpi_table.txt"
            if os.path.exists(acpi_table_path):
                os.remove(acpi_table_path)                                      #checks if older log file exists then removes the older logs
            tree = ET.parse(r'syscope.xml')
            getroot = tree.getroot()                                            #get root node of the xml tree
            acpi_content = getroot.findall(".//*[@Na"
            "me='"+acpi_search_element+"']/Item")                               #search for the table name and get all the items of the table
            for expectedtable in acpi_content:                                  #loop through matching table elements content
                table_content = expectedtable.attrib                            #find the atribuite of the content
                for key,value in list(table_content.items()):                         #iterate through each of the attribute items
                    try:
                        with open(acpi_table_path,"a+") as acpi_table:          #opens the file and writes the value of table content
                            acpi_table.write(value+"\n")
                    except Exception as e:
                       library.write_log(lib_constants.LOG_ERROR,"ERROR"+str(e),#through error if not successful
                            tc_id,script_id,"None","None",log_level,tbd)
                       return False
                acpi_table.close()
            return "acpi_table.txt"
        except Exception as e:
            library.write_log(lib_constants.LOG_ERROR,"ERROR: "+str(e),
                              tc_id,script_id,log_level,tbd)
            return False
    else:                                                                       #child table name does not exist then start creating dump of all the table in ACPI branch
        try:
            acpi_dump_path = log_path+r"\\"+logfile+"_acpi_dump.txt"
            if os.path.exists(acpi_dump_path):
                os.remove(acpi_dump_path)                                       #checks if older log file exists then removes the older logs
            each_table = 0
            for each_table in acpi_subtable_list:
                content = sys_scope_root.findall(".//*[@Na"
                "me='"+each_table+"']/Item")
                for expectedtable in content:
                    table_content = expectedtable.attrib
                    for key,value in list(table_content.items()):
                        try:
                            with open(acpi_dump_path,"a+") as acpi_dump:        #opens the file and writes the table content
                                acpi_dump.write(value+"\n")
                        except Exception as e:
                            library.write_log(lib_constants.LOG_ERROR, "ERROR :"
                                +str(e),tc_id,script_id,"None","None",
                                              log_level,tbd)
                            return False
                acpi_dump.close()

            return False                                                        #return all the acpi table combine.
        except Exception as e:
            library.write_log(lib_constants.LOG_ERROR,"ERROR: "+str(e),
                          tc_id,script_id,"None","None",log_level,tbd)
            return False

################################################################################
#   Function name   : search_acpi_table()
#   description     : Read and Verify ACPI table TPM2 OEM ID;
#                     FACP bit[21:21]; ACPI Dump PTPY
#   parameters      : 'tc_id' is test case id
#                          'script_id' is script id
#                          'token ' is original string
#   Returns         : True/False
######################### Main script ##########################################

def search_acpi_table(sel,table_name,tc_id,script_id,log_level = "ALL",
                      tbd = None):
        logfile =script_id.split(".")[0]
        log_path =lib_constants.SCRIPTDIR
        try:
           acpi_table_path = log_path+r"\\"+logfile+"_acpi_table.txt"
           if os.path.exists(acpi_table_path):                                  #check if the text file exists in path
             pattern_first = re.compile(r'(\.\W+)?([^.]?' + sel + '[^.]*?\" )|' #regular expression pattern for search variable from text file
                                       r'(\.\W+)?([^.]?' + sel + '[^.]*?\ ")|'
                                       r'(\.\W+)?([^.]?' + sel + '[^.]*?\.)',
                               re.DOTALL | re.IGNORECASE | re.MULTILINE)
             with open(acpi_table_path, 'r') as fsearch:                        #open the existing text file and create a virtual memory
                with contextlib.closing(mmap.mmap(fsearch.fileno(), 0,
                                        access=mmap.ACCESS_READ)) as m:
                    for match in pattern_first.findall(m):
                         Search_result = match[1]                               #matched output is assign to search result variable
             return Search_result
        except Exception as e:                                                  #throw exception if any error occur
            library.write_log(lib_constants.LOG_ERROR,"ERROR: "+str(e),
                          tc_id,script_id,"None","None",log_level,tbd)
            return False




