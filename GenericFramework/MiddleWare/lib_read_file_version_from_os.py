__author__ = "kapilshx\yusufmox"

###########################General Imports######################################
import os
import platform
import string
import xml.etree.ElementTree as ET
############################Local imports#######################################
import lib_constants
import library
import utils
import lib_tool_installation
################################################################################


################################################################################
# Function Name : lib_read_file_version_from_os
# Parameters    : smbios_version_token, testcaseid, scriptid, loglevel and tbd
# Return Value  : file_version on success, False on failure
# Functionality : To read file version under fvi table from sysscope tool in os
# UDL param     : MRC, UCODE implemented
################################################################################
def read_file_version_from_os(smbios_version_token,platform,test_case_id,
                              script_id, loglevel = "ALL", tbd="None"):

    try:
        smbios_version_token = smbios_version_token.upper().split(' ')

        smbios_version_token,end_pos = library.\
            extract_parameter_from_token(smbios_version_token, "READ", "VERSION",
                                                            loglevel, tbd)      # To extract the parameter b/t "READ" and "VERSION",to get smbios token

        smbios_dict = {"MRC": "reference code - mrc",
                       "UCODE": "Ucode Version",
                       "CSEFW": "me firmware version",
                       "REFERENCECODE-CPU" : "Reference Code - CPU"}

        sysscopepath = lib_constants.SYSCOPE_TOOLDIR                            # reads the config file to fetch the details of tool directory

        if lib_tool_installation.install_Syscope(test_case_id,script_id):
            library.write_log(lib_constants.LOG_INFO,"INFO: SystemScope is "
                              "Installed", test_case_id, script_id, "None",
                              "None",loglevel,tbd)                              # installs the syscope tool
        else:                                                                   #if syscope tool is not installed
            library.write_log(lib_constants.LOG_INFO,"INFO: SystemScope is NOT "
                              "installed, Installing Now", test_case_id,
                              script_id, "None", "None", loglevel, tbd)

    except Exception as e:
        library.write_log(lib_constants.LOG_ERROR,"ERROR: %s" % e, test_case_id,
                          script_id, "None", "None", loglevel, tbd)             # write error msg to log
        return False

    try:
        if lib_tool_installation.execute_syscope():                             #if log is generated by syscope tool
            library.write_log(lib_constants.LOG_INFO, "INFO: Log has been "
                              "generated By System Scope tool", test_case_id,
                              script_id, "None", "None", loglevel, tbd)
        else:                                                                   #if log is not generated by syscope tool
            library.write_log(lib_constants.LOG_INFO, "INFO: Log has not been "
                              "generated By System Scope tool", test_case_id,
                              script_id, "None", "None", loglevel, tbd)
        os.chdir(sysscopepath)

        smbios_token = "Group Associations {Type 14}"

        smbios_flag = False
        smbios_data_all = ''
        tree = ET.parse(r'./Logs/syscope.xml')                                  #Reading the .xml and storing into one variable
        root = tree.getroot()
        smbios_table_name = lib_constants.SMBIOS_FVI_TABLE_NAME

        group_root = root.findall(".//*[@Name='"+smbios_table_name+"']/*")      #Reading the entries of SMBIOS Table
 
        for items in group_root:                                                #loop to search given smbios_token under SMBIOS table
            if smbios_token.lower() == items.attrib['Name'].lower():
                smbios_flag = False                                             #Resetting the value of flag
                smbios_name_string = ".//*[@Name='"+items.attrib['Name']+"']/*" #Input for the findall function
                sub_group_root = root.findall(smbios_name_string)
                for sub_items in sub_group_root:                                #loop to search specific smbios_version_token under SMBIOS table
                    if (sub_items.attrib) != {}:
                        if(smbios_dict[smbios_version_token].lower() == 
                               (sub_items.attrib['Name']).lower()):             #if fvi table property matches with smbios_token
                            smbios_data_all = sub_items.attrib['Version']
                            smbios_flag = True
                            break
                        else:
                            pass
                    else:
                        pass
            else:                                                               #If input smbios_token is not found under SMBIOS table
                pass

        if smbios_flag:                                                         #If fvi table property matches with smbios_token
            library.write_log(lib_constants.LOG_INFO, "INFO: Read %s version"
                              " from FVI in os successfully" % smbios_version_token,
                              test_case_id, script_id, "None", "None", loglevel,
                              tbd)                                              #Write info msg to log

            library.write_log(lib_constants.LOG_INFO, "INFO: Read %s version"
                              " is equal to %s in os" % (smbios_version_token,
                                                         smbios_data_all),
                              test_case_id, script_id, "None", "None", loglevel,
                              tbd)                                              #Write info msg to log

            if "UCODE" in smbios_version_token.upper().strip():
                smbios_data_all_new = (smbios_data_all.strip(" ")) + "'h"
                return smbios_data_all_new
            else:
                return smbios_data_all
        else:                                                                   #If failed to match fvi table property with smbios_token
            library.write_log(lib_constants.LOG_INFO, "INFO: Failed to read %s "
                              "version from FVI in os" % smbios_version_token,
                              test_case_id, script_id, "None", "None", loglevel,
                              tbd)                                              #Write info msg to log
            return False

    except Exception as e:
        library.write_log(lib_constants.LOG_ERROR, "ERROR: Exception in library"
                          " function reading smbios value from syscope tool as "
                          "%s " %e, test_case_id, script_id, "None", "None",
                          loglevel, tbd)                                        #Write the exception error msg to log
        return False
################################################################################