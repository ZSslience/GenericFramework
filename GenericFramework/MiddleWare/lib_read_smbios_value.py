__author__ = "kapilshx"

###########################General Imports######################################
import os
import platform
import string
############################Local imports#######################################
import lib_constants
import library
import utils
import lib_tool_installation
################################################################################
# Function Name : read_smbios_value
# Parameters    : smbios_token, testcaseid, scriptid, loglevel and tbd
# Return Value  : Log_path & smbios_token on success, False on failure
# Functionality : To read smbios structures for variables from sysscope tool
################################################################################


def read_smbios_value(smbios_token, test_case_id, script_id, loglevel="ALL",
                      tbd="None"):
    import xml.etree.ElementTree as ET
    try:
        log_file = script_id.split(".")[0]
        smbios_token = smbios_token.split(' ')
        smbios_token, end_pos = library.\
            extract_parameter_from_token(smbios_token, "for", "", loglevel, tbd)# To extract the parameter b/t "for" and ""  , to get smbios token
        sysscopepath = utils.ReadConfig("Systemscope", "Tooldir")               # reads the config file to fetch the details of tool directory
        if lib_tool_installation.install_Syscope(test_case_id, script_id):
            library.write_log(lib_constants.LOG_INFO,
                              "INFO: SystemScope is Installed", test_case_id,
                              script_id, "None", "None", loglevel, tbd)         # installs the syscope tool
        else:                                                                   # if syscope tool is not installed
            library.write_log(lib_constants.LOG_INFO,
                              "INFO: SystemScope is NOT installed,"
                              " Installing Now", test_case_id, script_id,
                              "None", "None", loglevel, tbd)
    except Exception as e:
        library.write_log(lib_constants.LOG_ERROR,
                          "ERROR: "+str(e), test_case_id, script_id, "None",
                          "None", loglevel, tbd)                                # write error msg to log
        return False
    try:
        if lib_tool_installation.execute_syscope():                             # if log is generated by syscope tool
            library.write_log(lib_constants.LOG_INFO,
                              "INFO: Log has been generated By System Scope"
                              " tool", test_case_id, script_id, "None", "None",
                              loglevel, tbd)
        else:                                                                   # if log is not generated by syscope tool
            library.write_log(lib_constants.LOG_INFO,
                              "INFO: Log has not been generated By System Scope"
                              " tool", test_case_id, script_id, "None", "None",
                              loglevel, tbd)
        log_path = lib_constants.SCRIPTDIR+r"\\" + log_file+".txt"              # to give the generated log_path
        if os.path.exists(log_path):                                            # to check the existence of log_file
            os.remove(log_path)
        else:
            pass

        os.chdir(sysscopepath)
        smbios_flag =False
        smbios_data = ''
        smbios_data_all = ''
        tree = ET.parse(r'C:\Program Files\Intel Corporation\
        Intel(R) System Scope Tool\Logs\syscope.xml')                           # Reading the .xml and storing into one variable
        root = tree.getroot()
        group_root = root.findall(".//*[@Name='SMBIOS']/*")                     # Reading the entries of SMBIOS Table
        for items in group_root:                                                # loop to search given smbios_token under SMBIOS table
            smbios_group_output = items.attrib
            smbios_full_name_string = smbios_group_output['Name'].lower()
            if smbios_full_name_string.find(smbios_token.lower()) != -1:        # If input smbios_token is found under SMBIOS table
                
                if "{type 1}" in smbios_full_name_string:

                    smbios_flag = True                                          # Resetting the value of flag
                    smbios_data = smbios_group_output['Name']                   # Assigning specific smbios_name_string to smbios_data
                
                    smbios_name_string = ".//*[@Name='"+smbios_data+"']/*"      # Input for the findall function
                    
                    smbios_data_all = smbios_data_all + smbios_data + "\n"      # To store all content to smbios_data_all
                    
                    sub_group_root = root.findall(smbios_name_string)
                    
                    for sub_items in sub_group_root:                            # loop to search specific smbios_name_string under SMBIOS table
                        if "Board Name&#x2F; ID" == list(sub_items.attrib.values()):
                            sub_group_output = "Board Name/ ID", \
                                               list(sub_items.attrib.values())        # Assigning dictionary key & value to out_2 variable
                           
                        else:
                            sub_group_output = list(sub_items.attrib.keys()),\
                                               list(sub_items.attrib.values())        # Assigning dictionary key & value to out_2 variable
                            
                        smbios_data = sub_group_output[1][0] + "=" +\
                                      sub_group_output[1][1]
                        smbios_data = smbios_data.encode('ascii', 'ignore').\
                            decode('ascii')
                        smbios_data_all = smbios_data_all + smbios_data + "\n"  # To store all content to smbios_data_all
                        
                    break
                else:
                   
                    smbios_flag = True                                          # Resetting the value of flag
                    smbios_data = smbios_group_output['Name']                   # Assigning specific smbios_name_string to smbios_data
                   
                    smbios_name_string = ".//*[@Name='" + smbios_data + "']/*"  # Input for the findall function
                    
                    smbios_data_all = smbios_data_all + smbios_data + "\n"      # To store all content to smbios_data_all
                   
                    sub_group_root = root.findall(smbios_name_string)

                for sub_items in sub_group_root:                                # loop to search specific smbios_name_string under SMBIOS table
                    if "Board Name&#x2F; ID" == list(sub_items.attrib.keys()):
                        sub_group_output = "Board Name/ ID",\
                                           list(sub_items.attrib.values())            # Assigning dictionary key & value to out_2 variable
                    else:
                        sub_group_output = list(sub_items.attrib.keys()),\
                                           list(sub_items.attrib.values())            # Assigning dictionary key & value to out_2 variable
                    smbios_data = sub_group_output[1][0] + "=" +\
                                  sub_group_output[1][1]
                    smbios_data = smbios_data.encode('ascii', 'ignore').\
                        decode('ascii')
                    smbios_data_all = smbios_data_all+ smbios_data + "\n"       # To store all content to smbios_data_all

            else:                                                               # If input smbios_token is not found under SMBIOS table
                pass
        if True == smbios_flag:                                                 # If smbios_flag is equal to True
            with open(log_path, "w") as f:                                      # Opening the log_file in write mode
                f.write(smbios_data_all)                                        # Write the all contents to log_file
            f.close()                                                           # To close the file
            return log_path, smbios_token
        else:                                                                   # If SMBIOS token is wrongly given in input
            library.write_log(lib_constants.LOG_INFO,
                              "INFO: SMBIOS input token value :'%s' is wrong"
                              % smbios_token, test_case_id, script_id, "None",
                              "None", loglevel, tbd)                            # Write info msg to log
            return False, smbios_token
    except Exception as e:
        library.write_log(lib_constants.LOG_ERROR,
                          "ERROR: Exception in library function reading smbios"
                          " value from syscope tool as %s " % e,
                          test_case_id, script_id, "None", "None", loglevel,
                          tbd)                                                  # Write the exception error msg to log
        return False

################################################################################